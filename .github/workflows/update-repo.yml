name: Update APT Repository

on:
  repository_dispatch:
    types: [package-updated]  # This listens for the event from package repos
  workflow_dispatch:          # Manual trigger
  schedule:
    - cron: '0 6 * * *'        # Daily rebuild
  push:
    branches:
      - main                   # Trigger on push to main branch

jobs:
  update-apt-repo:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Debug repository dispatch
      if: github.event_name == 'repository_dispatch'
      run: |
        echo "Event type: ${{ github.event.action }}"
        echo "Client payload: ${{ toJson(github.event.client_payload) }}"
        echo "Triggered by: ${{ github.event.client_payload.repository }}"

    - name: Discover package repositories
      id: discover
      run: |
        echo "Discovering repositories with 'apt-package' topic..."

        # Use GitHub API to find repos with apt-package topic
        repos=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/search/repositories?q=org:hatlabs+topic:apt-package" | \
          jq -r '.items[].full_name')

        echo "Found repositories:"
        echo "$repos"

        # Store for next step
        echo "repos<<EOF" >> $GITHUB_OUTPUT
        echo "$repos" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y dpkg-dev apt-utils curl jq gnupg
        mkdir -p packages apt-repo/pool/main apt-repo/dists/stable/main/binary-arm64 apt-repo/dists/stable/main/binary-all

    - name: Import GPG signing key
      run: |
        echo "${{ secrets.APT_SIGNING_KEY }}" | gpg --import --batch
        # Get the key ID for signing
        GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -1 | sed 's/.*\/\([A-Z0-9]*\) .*/\1/')
        echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
        echo "Using GPG key: $GPG_KEY_ID"

    - name: Download latest packages
      run: |
        echo "${{ steps.discover.outputs.repos }}" | while IFS= read -r repo; do
          if [ -n "$repo" ]; then
            echo "=== Processing $repo ==="

            # Get latest release info
            echo "Fetching latest release from $repo..."
            release_info=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/$repo/releases/latest")

            # Check if release exists
            if [ "$(echo "$release_info" | jq -r '.message // empty')" = "Not Found" ]; then
              echo "No releases found for $repo"
              continue
            fi

            release_tag=$(echo "$release_info" | jq -r '.tag_name')
            echo "Latest release: $release_tag"

            # Download all .deb files from the release
            echo "Downloading .deb files from $repo..."

            # Process each .deb asset
            echo "$release_info" | jq -r '.assets[] | select(.name | endswith(".deb")) | "\(.name)|\(.browser_download_url)"' | \
            while IFS='|' read -r name url; do
              if [ -n "$name" ] && [ -n "$url" ]; then
                echo "Downloading $name..."
                temp_file="packages/temp_$name"
                curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                     -H "Accept: application/octet-stream" \
                     "$url" -o "$temp_file"

                if [ $? -eq 0 ]; then
                  echo "‚úì Downloaded $name"

                  # Extract the actual package version from the .deb metadata
                  actual_version=$(dpkg-deb --field "$temp_file" Version 2>/dev/null)
                  package_name=$(dpkg-deb --field "$temp_file" Package 2>/dev/null)
                  architecture=$(dpkg-deb --field "$temp_file" Architecture 2>/dev/null)

                  if [ -n "$actual_version" ] && [ -n "$package_name" ] && [ -n "$architecture" ]; then
                    # Create the correct filename based on package metadata
                    correct_filename="${package_name}_${actual_version}_${architecture}.deb"
                    final_path="packages/$correct_filename"

                    # Move to correct filename
                    mv "$temp_file" "$final_path"

                    echo "  Package: $package_name"
                    echo "  Version: $actual_version (corrected from filename)"
                    echo "  Architecture: $architecture"
                    echo "  Renamed to: $correct_filename"
                  else
                    echo "  ‚ö†Ô∏è  Could not extract package metadata, keeping original filename"
                    mv "$temp_file" "packages/$name"
                  fi
                else
                  echo "‚úó Failed to download $name"
                  rm -f "$temp_file"
                fi
              fi
            done

            echo ""
          fi
        done

        echo "=== Downloaded and renamed packages ==="
        ls -la packages/ || echo "No packages downloaded"
    - name: Build APT repository structure
      run: |
        # Copy packages to pool
        if ls packages/*.deb 1> /dev/null 2>&1; then
          cp packages/*.deb apt-repo/pool/main/
          echo "Copied $(ls packages/*.deb | wc -l) packages to repository"
        else
          echo "No .deb packages found to copy"
        fi

        cd apt-repo

        # Create directories for arm64 architecture only
        mkdir -p dists/stable/main/binary-arm64
        mkdir -p dists/stable/main/binary-all

        # Generate Packages files
        echo "Generating Packages files for arm64..."

        # For arm64 packages
        dpkg-scanpackages -a arm64 pool/ /dev/null > dists/stable/main/binary-arm64/Packages 2>/dev/null || touch dists/stable/main/binary-arm64/Packages
        gzip -k dists/stable/main/binary-arm64/Packages

        # For architecture-independent packages (scripts, docs, etc.)
        dpkg-scanpackages -a all pool/ /dev/null > dists/stable/main/binary-all/Packages 2>/dev/null || touch dists/stable/main/binary-all/Packages
        gzip -k dists/stable/main/binary-all/Packages

        # Generate Release file with arm64 architecture
        echo "Generating Release file..."
        cd dists/stable
        cat > Release << EOF
        Origin: Hat Labs
        Label: Hat Labs APT Repository
        Suite: stable
        Codename: stable
        Version: 1.0
        Architectures: arm64 armhf all
        Components: main
        Description: Hat Labs package repository
        Date: $(date -Ru)
        EOF

        # Add package checksums
        apt-ftparchive release . >> Release

        # Sign the Release file
        echo "Signing Release file with GPG..."
        gpg --batch --yes --detach-sign --armor -u $GPG_KEY_ID -o Release.gpg Release
        gpg --batch --yes --clear-sign -u $GPG_KEY_ID -o InRelease Release

        echo "Repository structure:"
        find ../apt-repo -type f | sort

    - name: Export public GPG key
      run: |
        cd apt-repo
        # Export the public key for users to download
        gpg --export --armor $GPG_KEY_ID > hat-labs-apt-key.asc

        # Also create a keyring file
        gpg --export $GPG_KEY_ID > hat-labs-apt-key.gpg

    - name: Create repository index page
      run: |
        cd apt-repo

        # Get package information for index
        package_info=""
        for arch in arm64 armhf all; do
          pkgfile="dists/stable/main/binary-$arch/Packages"
          if [ -f "$pkgfile" ]; then
            awk -v arch="$arch" '
              /^Package:/ { pkg = $2 }
              /^Description:/ { desc = substr($0, 13) }
              /^Filename:/ { file = $2 }
              /^$/ && pkg && desc && file {
                print pkg ":" desc ":" arch ":" file
                pkg = desc = file = ""
              }
            ' "$pkgfile" >> package_info.tmp
          fi
        done
        cat > index.html << EOF
        <!DOCTYPE html>
        <html>
        <head>
            <title>Hat Labs APT Repository</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
                .setup { background: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0; }
                .package { margin: 15px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
                code { background: #f4f4f4; padding: 2px 6px; border-radius: 3px; font-family: monospace; }
                .command { background: #2d3748; color: #e2e8f0; padding: 10px; border-radius: 5px; margin: 10px 0; }
                h1 { color: #2d3748; }
                h2 { color: #4a5568; border-bottom: 2px solid #e2e8f0; padding-bottom: 5px; }
                .security { background: #e6fffa; border-left: 4px solid #38b2ac; padding: 15px; margin: 20px 0; }
            </style>
        </head>
        <body>
            <h1>üé© Hat Labs APT Repository</h1>
            <p>Debian packages for Hat Labs projects</p>

            <div class="security">
                <h3>üîê Installation</h3>
                <p>Add our signing key to verify package authenticity:</p>
                <div class="command">curl -fsSL https://apt.hatlabs.fi/hat-labs-apt-key.asc | sudo gpg --dearmor -o /usr/share/keyrings/hatlabs.gpg</div>
                <div class="command">echo "deb [signed-by=/usr/share/keyrings/hatlabs.gpg] https://apt.hatlabs.fi stable main" | sudo tee /etc/apt/sources.list.d/hatlabs.list</div>
                <div class="command">sudo apt update</div>
            </div>

            <h2>üìã Available Packages</h2>
        EOF

        # Add package information
        package_info=""
        for arch in arm64 armhf all; do
          pkgfile="dists/stable/main/binary-$arch/Packages"
          if [ -f "$pkgfile" ]; then
            awk -v arch="$arch" '
              /^Package:/ { pkg = $2 }
              /^Description:/ { desc = substr($0, 13) }
              /^Filename:/ { file = $2 }
              /^$/ && pkg && desc && file {
                print pkg ":" desc ":" arch ":" file
                pkg = desc = file = ""
              }
            ' "$pkgfile" >> package_info.tmp
          fi
        done

        if [ -f package_info.tmp ] && [ -s package_info.tmp ]; then
          sort package_info.tmp | uniq > package_info_sorted.tmp
          cat package_info_sorted.tmp | awk -F: '
            {
              pkg=$1; desc=$2; arch=$3; file=$4
              key=pkg
              pkgs[key]=desc
              # Store download links per arch
              links[key,arch]="<a href=\"" file "\">" arch "</a>"
              archlist[key]=archlist[key] ? archlist[key] "," arch : arch
            }
            END {
              for (k in pkgs) {
                printf "<div class=\"package\">\n<h3>%s</h3>\n<p>%s</p>\n", k, pkgs[k]
                # Print architecture tags as download links
                split(archlist[k], archs, ",")
                printf "<p><strong>Architectures:</strong> "
                for (i=1; i<=length(archs); i++) {
                  a=archs[i]
                  printf "%s", links[k,a]
                  if (i < length(archs)) printf ", "
                }
                printf "</p>\n"
                printf "<div class=\"command\">sudo apt install %s</div>\n</div>\n", k
              }
            }
          ' >> index.html
          rm -f package_info.tmp package_info_sorted.tmp
        else
          cat >> index.html << EOF
            <div class="package">
                <p><em>No packages available yet. Check back soon!</em></p>
            </div>
        EOF
        fi

        cat >> index.html << EOF

            <h2>üîë Manual Key Installation</h2>
            <div class="setup">
                <p>Download the signing key: <a href="hat-labs-apt-key.asc">hat-labs-apt-key.asc</a></p>
                <p>Key fingerprint: <code id="fingerprint">Loading...</code></p>
            </div>

            <hr>
            <p><small>Last updated: $(date)</small></p>
            <p><small>Repository URL: <code>https://apt.hatlabs.fi</code></small></p>
            <p><small>üîí This repository is cryptographically signed for security</small></p>
        </body>
        </html>
        EOF

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./apt-repo
        cname: apt.hatlabs.fi

    - name: Report status
      run: |
        echo "=== APT Repository Update Complete ==="
        echo "Repository deployed to: https://apt.hatlabs.fi"
        if [ -f apt-repo/dists/stable/main/binary-arm64/Packages ]; then
          package_count=$(grep -c '^Package:' apt-repo/dists/stable/main/binary-arm64/Packages)
          echo "Packages in repository: $package_count"
        fi
